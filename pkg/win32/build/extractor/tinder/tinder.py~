#!/usr/bin/env python

import os, sys, shutil

def extract(case, userdata):
    extractdir = os.path.join(case, "extracted data")
    if not os.path.exists(extractdir):
        os.makedirs(extractdir)
    extractdir = os.path.join(extractdir, "tinder")
    if not os.path.exists(extractdir):
        os.makedirs(extractdir)
    cachedest = os.path.join(extractdir, "cache")
    if os.pathexists(cachedest):
        shutil.rmtree(cachedest)
    filesdest = os.path.join(extractdir, "files")
    if os.pathexists(filesdest):
        shutil.rmtree(filesdest)
    dbpath = os.path.join(extractdir, "db")
    if not os.pathexists(dbpath):
        os.makedirs(dbpath)
    copy(case, userdata, cachedest, filesdest, dbpath)
    
def copy(case, userdata, cachedest, filesdest, dbpath):
    sourcedb = os.path.join(userdata, "data", "com.tinder", "databases", "tinder.db")
    destpath = os.path.join (dbpath, "tinder.db" )
    source = shutil.copyfile(sourcedb, destpath)

    datapath = os.path.join(userdata, "data", "com.tinder")
    cachesource=os.path.join(datapath, "cache")
    filessource=os.path.join(datapath, "files")
    cache=shutil.copytree(cachesource, cachedest)
    files=shutil.copytree(filessource, filesdest)

def sql(case, dbpath):
    db = os.path.join (dbpath, "tinder.db" )
    output = os.path.join(dbpath, '..', 'output.txt')
    openoutput = open(output, 'w', encoding='utf8')
    dbconn = apsw.Connection(db)
    dbshell = apsw.Shell(stdout=output, db=dbconn)
    try:
        SQLShell.process_command(".header on")
        SQLShell.process_sql("select * from messages")
    except Exception:
        print("Extract Failed")
    
