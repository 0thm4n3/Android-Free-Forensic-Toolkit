#!/usr/bin/env python

import os, sys, getopt, time, apsw, re, report.makehtml


def makehead(report):
	report.write("<html>\n")
	report.write("<head>\n")
	report.write("<style type='text/css'>\n")
	report.write("	html, body {height: 100%; margin: 0}\n")
	report.write("	#content {width: 100%; height: 100%}\n")
	report.write("	#left {width: 150px; height: 100%; float: left;}\n")
	report.write("	#right {margin-left: 170px; height: 100%;}\n")
	report.write("</style>\n")
	report.write("<link rel=\"stylesheet\" href=\"report.css\" type=\"text/css\"/>\n")
	report.write("<h1><div align=center> AFFT Report - Facebook - Messages </div></h1>\n")					###Change Me
	reportdate = time.strftime("%d/%m/%Y")
	reporttime = time.strftime("%H:%M:%S")
	report.write("	<p>Report compiled on " + reportdate + " at " + reporttime + " </p>\n")
	report.write("	<p>Generated by Android Free Forensic Toolkit. &copy; Conor Rynne</p>\n")
	report.write("</head>\n")
	report.write("<body>\n")
	report.write("<div id='content'>\n")
	report.write("<br /><br />")
	report.write("  <div id='left' class=\"SideBar\">\n")
	report.write("	  <table>\n")
	report.write("<TR><TD>Reports</TD></TR>")
	
def importnavbar(report, case):
	navbarlocation = os.path.join(case, "reports", "navlist")
	navbar = open(navbarlocation, 'r')
	report.write(navbar.read())
	
	
	
def makemid(report):
	report.write("	</table>\n")
	report.write("	</div>\n")
	report.write("	<div id='right'>\n")

	

def maketable(reportfile, case):
	reportfiledb = os.path.join(case, "extracted data", "facebook-messenger", "db", "threads_db2")
	reportfile_connection=apsw.Connection(reportfiledb)
	reportfile_cursor1=reportfile_connection.cursor()
	reportfile_cursor2=reportfile_connection.cursor()
	reportfile_cursor3=reportfile_connection.cursor()
	
	reportfile.write("<table CELLPADDING=8 CELLSPACING=0 VALIGN=TOP>\n")
	reportfile.write("<tr><td><a href=reportfile-contacts.html>Contacts</a></td></tr>\n")
	reportfile.write("</table>\n")
	reportfile.write("<div class=\"ResultsTable\">\n")
	reportfile.write("<table>\n")
	reportfile.write("<tr><td><b>Conversation</b></td><td><b>Message</b></td><td><b>Sent By</b></td><td><b>Attachments</b></td><td><b>Coordinates</b></td><td><b>Time</b></td></tr>\n")

	for row1 in reportfile_cursor1.execute("select msg_id from messages order by timestamp_ms DESC"):
		for entry1 in row1:
			reportfile.write("<TR>\n")
			for row2 in reportfile_cursor2.execute("select thread_key from messages WHERE msg_id = '" + str(entry1) + "'"):
				for entry2 in row2:
						for row3 in reportfile_cursor3.execute("select participants from threads where thread_key = '" + str(entry2) + "'"):
							for entry3 in row3:							
								entrylist = str(entry3)
								entrylist = entrylist.replace("{", "")
								entrylist = entrylist.replace('"', '')
								entrylist = entrylist.replace('}', '')
								entrylist = entrylist.replace('[', '')
								entrylist = entrylist.replace(']', '')
								entrylist = entrylist.split(",")
								lenlist = len(entrylist)
								countlist = 0
								name = re.compile('name:')
								writelist = ""
								while countlist != lenlist:
									if name.match(entrylist[countlist]):
										writelist = writelist + " " + entrylist[countlist] + ","
									countlist = countlist + 1
								threadkey = str(entry2)
								threadkey = threadkey.split(":")
								if threadkey[0] == "ONE_TO_ONE":
									writelist = "&#40;Private Message&#41;" + writelist
								elif threadkey[0] == "GROUP":
									writelist = "&#40;Group Conversation&#41;" + writelist
								writelist = writelist.replace("name:","")
								reportfile.write("<TD>" + writelist[:-1] + "</TD>\n")
				for row2 in reportfile_cursor2.execute("select text from messages WHERE msg_id = '" + str(entry1) + "'"):
					for entry2 in row2:
						text = str(entry2)
						text = text.replace("<", "\<")
						text = text.replace(">", "\>")
						reportfile.write("<TD>" + text + "</TD>\n")
			
				for row2 in reportfile_cursor2.execute("select sender from messages WHERE msg_id = '" + str(entry1) + "'"):
					for entry2 in row2:
						senderdetails = str(entry2)
						senderdetails = senderdetails.replace("{", "")
						senderdetails = senderdetails.replace('"', '')
						senderdetails = senderdetails.replace('}', '')
						senderdetails = senderdetails.replace('email:', '')
						senderdetails = senderdetails.replace('user_key:', '')
						senderdetails = senderdetails.replace('name:', '')
						senderlist = senderdetails.split(',')
						if len(senderlist) == 3:
							reportfile.write("<TD>" + senderlist[2] + "</TD>\n")
						else:
							reportfile.write("<TD>N/A</TD>")
					
				for row2 in reportfile_cursor2.execute("select attachments from messages WHERE msg_id = '" + str(entry1) + "'"):
					for entry2 in row2:
						if str(entry2) == '[]':
							entry_str2 = 'None'
						else:
							attachmentre = re.compile(r"(filename\":\".*?\")")
							attachresults = attachmentre.findall(entry2)
							attresults_tmp1 = str(attachresults)
							attresults_tmp2 = attresults_tmp1.replace('[\'filename":"',"")
							entry_str2 = attresults_tmp2.replace('"\']','')
						reportfile.write("<TD>" + entry_str2 + "</TD>\n")
					
				for row2 in reportfile_cursor2.execute("select coordinates from messages WHERE msg_id = '" + str(entry1) + "'"):
					for entry2 in row2:
						coord_list = str(entry2)
						coord_list = coord_list.replace("{", "")
						coord_list = coord_list.replace('"latitude":', "")
						coord_list = coord_list.replace('"longitude":', "")
						coord_list = coord_list.replace('"accuracy":', "")
						coord_list = coord_list.replace("}", "")
						coord_list = coord_list.replace(",", " ")
						coord = coord_list.split()
						if len(coord) == 1:
							reportfile.write("<TD>N/A</TD>")
						else:
							lat = float(coord[0])
							lat = "%0.4f" % lat
							
							lon = float(coord[1])
							lon = "%0.4f" % lon
							if len(coord) == 2:
								reportfile.write("<TD><a href='https://www.google.com/maps/preview/@" + str(coord[0]) + "," + str(coord[1]) + ",15z'>Latitude of " + str(lat) + ", Longitude of " + str(lon) + "</a></TD>")
							else:
								accuracy = float(coord[2])
								zoom = int(accuracy)
								reportfile.write("<TD><a href='https://www.google.com/maps/preview/@" + str(coord[0]) + "," + str(coord[1]) + "," + str(zoom) + "z'> Latitude of " + str(lat) + ", Longitude of " + str(lon) + " to the accuracy of " + str(accuracy) + "meters</a></TD>")
				for row2 in reportfile_cursor2.execute("select datetime(timestamp_ms/1000,'unixepoch','localtime') as timestamp_ms from messages WHERE msg_id = '" + str(entry1) + "'"):
					for entry2 in row2:
						reportfile.write("<TD>" + str(entry2) + "</TD>\n")
					
			reportfile.write("</TR>\n")
	reportfile.write("</table>\n")
	reportfile.write("</div>\n")

	
def makereport(case):
	
	reportlocation = os.path.join(case, "reports", "facebook-messenger", "report.html")
	reportfile = open(reportlocation, 'w')
	reportname = "Facebook Messenger Messages"
	
	report.makehtml.makehead(reportfile, reportname)
	report.makehtml.importnavbar(reportfile, case)
	report.makehtml.makemid(reportfile)
	maketable(reportfile, case)
	
	
	reportfile.close()
	
	


